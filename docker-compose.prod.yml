version: '3'

services:
  # PostgreSQL database with pgvector
  db:
    image: ankane/pgvector:latest
    container_name: fastapi-nextjs-db
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - TZ=${TZ}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend service (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: fastapi-nextjs-backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - PROJECT_NAME=${PROJECT_NAME}
      - SECRET_KEY=${SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - TZ=${TZ}
    networks:
      - app-network

  # Frontend service (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: fastapi-nextjs-frontend
    restart: always
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME}
      - TZ=${TZ}
    networks:
      - app-network

  # Nginx for reverse proxy and serving static files
  nginx:
    image: nginx:alpine
    container_name: fastapi-nextjs-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    environment:
      - TZ=${TZ}
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data: